name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: pylon-coordinator
            asset_name: pylon-coordinator-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: pylon-coordinator
            asset_name: pylon-coordinator-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: pylon-coordinator.exe
            asset_name: pylon-coordinator-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: pylon-coordinator
            asset_name: pylon-coordinator-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: pylon-coordinator
            asset_name: pylon-coordinator-macos-arm64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.75
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin pylon-coordinator
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
          overwrite: true

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pyloncoord/pylon
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  crates-io-release:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.75

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish to crates.io
        run: |
          # Publish in dependency order
          cargo publish -p precision-by-difference --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p pylon-core --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p temporal-economic --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p cable-network --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p cable-spatial --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p cable-individual --token ${{ secrets.CRATES_IO_TOKEN }}
          sleep 30
          cargo publish -p pylon-coordinator --token ${{ secrets.CRATES_IO_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release, docker-release]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Pylon Coordination Infrastructure ${{ github.ref_name }}
            
            ### New Features
            - Add new features here
            
            ### Improvements
            - Add improvements here
            
            ### Bug Fixes
            - Add bug fixes here
            
            ### Breaking Changes
            - Add breaking changes here
            
            ### Installation
            
            #### Binary Installation
            Download the appropriate binary for your platform from the assets below.
            
            #### Docker
            ```bash
            docker pull pyloncoord/pylon:${{ github.ref_name }}
            ```
            
            #### Cargo
            ```bash
            cargo install pylon-coordinator
            ```
          draft: false
          prerelease: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
