# Makefile for Pylon Coordination Infrastructure
# Provides standardized build, test, and deployment commands

.PHONY: help build test clean install check fmt clippy doc bench
.PHONY: docker-build docker-run docker-push
.PHONY: dev prod staging
.PHONY: setup deps tools
.PHONY: audit security coverage

# Default target
.DEFAULT_GOAL := help

# Variables
RUST_VERSION := 1.75
PROJECT_NAME := pylon
DOCKER_IMAGE := pylon-coordination
DOCKER_TAG := latest
CARGO_TARGET := target
PROFILE := dev

# Colors for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
RESET := \033[0m

help: ## Show this help message
	@echo "$(BLUE)Pylon Coordination Infrastructure - Build System$(RESET)"
	@echo ""
	@echo "$(GREEN)Available targets:$(RESET)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(RESET) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Setup and dependencies
setup: ## Setup development environment
	@echo "$(BLUE)Setting up development environment...$(RESET)"
	rustup update $(RUST_VERSION)
	rustup default $(RUST_VERSION)
	rustup component add clippy rustfmt
	rustup target add wasm32-unknown-unknown
	$(MAKE) deps
	$(MAKE) tools

deps: ## Install project dependencies
	@echo "$(BLUE)Installing dependencies...$(RESET)"
	cargo fetch

tools: ## Install development tools
	@echo "$(BLUE)Installing development tools...$(RESET)"
	cargo install cargo-watch cargo-tarpaulin cargo-audit cargo-deny
	cargo install cargo-machete cargo-outdated
	@which sqlx >/dev/null || cargo install sqlx-cli

# Build targets
build: ## Build all crates in release mode
	@echo "$(BLUE)Building Pylon (release mode)...$(RESET)"
	cargo build --release --workspace

build-dev: ## Build all crates in development mode
	@echo "$(BLUE)Building Pylon (development mode)...$(RESET)"
	cargo build --workspace

build-maxperf: ## Build with maximum performance optimizations
	@echo "$(BLUE)Building Pylon (maximum performance)...$(RESET)"
	cargo build --profile maxperf --workspace

# Testing targets
test: ## Run all tests
	@echo "$(BLUE)Running tests...$(RESET)"
	cargo test --workspace --all-features

test-integration: ## Run integration tests
	@echo "$(BLUE)Running integration tests...$(RESET)"
	cargo test --test integration_tests --workspace

test-unit: ## Run unit tests only
	@echo "$(BLUE)Running unit tests...$(RESET)"
	cargo test --workspace --lib

coverage: ## Generate test coverage report
	@echo "$(BLUE)Generating coverage report...$(RESET)"
	cargo tarpaulin --workspace --all-features --out Html --output-dir target/tarpaulin

# Code quality
check: clippy fmt-check ## Run all code quality checks
	@echo "$(GREEN)All checks passed!$(RESET)"

clippy: ## Run Clippy linter
	@echo "$(BLUE)Running Clippy...$(RESET)"
	cargo clippy --workspace --all-features -- -D warnings

fmt: ## Format code
	@echo "$(BLUE)Formatting code...$(RESET)"
	cargo fmt --all

fmt-check: ## Check code formatting
	@echo "$(BLUE)Checking code formatting...$(RESET)"
	cargo fmt --all -- --check

# Security and auditing
audit: ## Run security audit
	@echo "$(BLUE)Running security audit...$(RESET)"
	cargo audit
	cargo deny check

security: ## Run all security checks
	@echo "$(BLUE)Running security checks...$(RESET)"
	$(MAKE) audit
	cargo audit advisories
	cargo audit bans
	cargo audit licenses

# Documentation
doc: ## Generate documentation
	@echo "$(BLUE)Generating documentation...$(RESET)"
	cargo doc --workspace --all-features --no-deps --open

doc-deps: ## Generate documentation with dependencies
	@echo "$(BLUE)Generating documentation with dependencies...$(RESET)"
	cargo doc --workspace --all-features --open

# Benchmarking
bench: ## Run benchmarks
	@echo "$(BLUE)Running benchmarks...$(RESET)"
	cargo bench --workspace

bench-baseline: ## Run benchmarks and save as baseline
	@echo "$(BLUE)Running benchmarks (baseline)...$(RESET)"
	cargo bench --workspace -- --save-baseline baseline

# Docker targets
docker-build: ## Build Docker image
	@echo "$(BLUE)Building Docker image...$(RESET)"
	docker build -t $(DOCKER_IMAGE):$(DOCKER_TAG) .

docker-build-dev: ## Build development Docker image
	@echo "$(BLUE)Building development Docker image...$(RESET)"
	docker build --target development -t $(DOCKER_IMAGE):dev .

docker-run: ## Run Docker container
	@echo "$(BLUE)Running Docker container...$(RESET)"
	docker run -p 8080:8080 -p 9090:9090 -p 50051:50051 $(DOCKER_IMAGE):$(DOCKER_TAG)

docker-push: ## Push Docker image to registry
	@echo "$(BLUE)Pushing Docker image to registry...$(RESET)"
	docker push $(DOCKER_IMAGE):$(DOCKER_TAG)

# Environment-specific targets
dev: ## Run in development mode
	@echo "$(BLUE)Starting development server...$(RESET)"
	PYLON_ENV=development cargo run --bin pylon-coordinator

dev-watch: ## Run in development mode with auto-reload
	@echo "$(BLUE)Starting development server with watch mode...$(RESET)"
	PYLON_ENV=development cargo watch -x "run --bin pylon-coordinator"

staging: ## Run in staging mode
	@echo "$(BLUE)Starting staging server...$(RESET)"
	PYLON_ENV=staging cargo run --release --bin pylon-coordinator

prod: ## Run in production mode
	@echo "$(BLUE)Starting production server...$(RESET)"
	PYLON_ENV=production cargo run --release --bin pylon-coordinator

# Utility targets
clean: ## Clean build artifacts
	@echo "$(BLUE)Cleaning build artifacts...$(RESET)"
	cargo clean
	rm -rf target/
	rm -rf logs/
	rm -rf coordination-data/

install: build ## Install binaries
	@echo "$(BLUE)Installing binaries...$(RESET)"
	cargo install --path crates/pylon-coordinator
	cargo install --path crates/pylon-cli

uninstall: ## Uninstall binaries
	@echo "$(BLUE)Uninstalling binaries...$(RESET)"
	cargo uninstall pylon-coordinator
	cargo uninstall pylon-cli

# Dependency management
update: ## Update dependencies
	@echo "$(BLUE)Updating dependencies...$(RESET)"
	cargo update

outdated: ## Check for outdated dependencies
	@echo "$(BLUE)Checking for outdated dependencies...$(RESET)"
	cargo outdated

unused: ## Check for unused dependencies
	@echo "$(BLUE)Checking for unused dependencies...$(RESET)"
	cargo machete

# Database operations
db-setup: ## Setup database
	@echo "$(BLUE)Setting up database...$(RESET)"
	sqlx database create
	sqlx migrate run

db-reset: ## Reset database
	@echo "$(BLUE)Resetting database...$(RESET)"
	sqlx database drop -y
	sqlx database create
	sqlx migrate run

# Configuration validation
config-check: ## Validate configuration files
	@echo "$(BLUE)Validating configuration...$(RESET)"
	@if [ -f pylon-config.toml ]; then \
		echo "$(GREEN)Configuration file found$(RESET)"; \
	else \
		echo "$(RED)Configuration file missing$(RESET)"; \
		exit 1; \
	fi

# Health checks
health: ## Run health checks
	@echo "$(BLUE)Running health checks...$(RESET)"
	cargo run --bin pylon-cli health-check

# Release preparation
release-check: ## Check if ready for release
	@echo "$(BLUE)Checking release readiness...$(RESET)"
	$(MAKE) test
	$(MAKE) clippy
	$(MAKE) audit
	$(MAKE) doc
	@echo "$(GREEN)Release checks passed!$(RESET)"

# Development utilities
logs: ## Tail application logs
	@echo "$(BLUE)Tailing logs...$(RESET)"
	tail -f logs/pylon.log

monitor: ## Monitor system resources
	@echo "$(BLUE)Monitoring system resources...$(RESET)"
	watch -n 1 'ps aux | grep pylon; echo ""; df -h; echo ""; free -h'

# Cleanup and maintenance
deep-clean: clean ## Deep clean including caches
	@echo "$(BLUE)Deep cleaning...$(RESET)"
	rm -rf ~/.cargo/registry/cache/
	rm -rf ~/.cargo/git/db/
	docker system prune -f

# Quick development cycle
quick: ## Quick development cycle (format, build, test)
	@echo "$(BLUE)Running quick development cycle...$(RESET)"
	$(MAKE) fmt
	$(MAKE) build-dev
	$(MAKE) test-unit

# Full development cycle  
full: ## Full development cycle (all checks and tests)
	@echo "$(BLUE)Running full development cycle...$(RESET)"
	$(MAKE) fmt
	$(MAKE) clippy
	$(MAKE) build
	$(MAKE) test
	$(MAKE) audit

# Performance testing
perf: ## Run performance tests
	@echo "$(BLUE)Running performance tests...$(RESET)"
	$(MAKE) build-maxperf
	$(MAKE) bench

# Show project status
status: ## Show project status
	@echo "$(BLUE)Project Status:$(RESET)"
	@echo "Rust version: $(shell rustc --version)"
	@echo "Cargo version: $(shell cargo --version)"
	@echo "Project: $(PROJECT_NAME)"
	@echo "Build profile: $(PROFILE)"
	@echo "Docker image: $(DOCKER_IMAGE):$(DOCKER_TAG)"
