[build-system]
requires = ["setuptools>=60", "wheel", "setuptools-scm>=6"]
build-backend = "setuptools.build_meta"

[project]
name = "sango-rine-shumba"
version = "1.0.0"
description = "Gear Ratio-Based Hierarchical Network with Transcendent Observer Architecture"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Research Team", email = "research@example.com"},
]
maintainers = [
    {name = "Research Team", email = "research@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Networking",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = [
    "gear-ratios",
    "hierarchical-networks",
    "transcendent-observer", 
    "oscillatory-hierarchy",
    "compression-resistance",
    "bit-rot-protection",
    "network-validation",
    "mathematical-networks",
    "observer-pattern",
    "semantic-compression",
]
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0", 
    "seaborn>=0.11.0",
    "pandas>=1.3.0",
    "sympy>=1.9",
]
requires-python = ">=3.8"

[project.urls]
Homepage = "https://github.com/example/sango-rine-shumba"
Documentation = "https://sango-rine-shumba.readthedocs.io/"
Repository = "https://github.com/example/sango-rine-shumba"
"Bug Reports" = "https://github.com/example/sango-rine-shumba/issues"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-asyncio>=0.15.0",
    "pytest-cov>=2.12.0",
    "black>=21.0.0",
    "flake8>=3.9.0", 
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=3.3.0",
    "tqdm>=4.62.0",
]
research = [
    "jupyter>=1.0.0",
    "ipython>=7.0.0",
    "networkx>=2.6.0", 
    "scikit-learn>=1.0.0",
    "statsmodels>=0.12.0",
    "pyyaml>=5.4.0",
]

[project.scripts]
sango-validate = "simulation:main"
sango-observer = "observer.transcendent_observer:main"
sango-compressor = "network.ambigous_compressor:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Black configuration for code formatting
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | validation_results
)/
'''

# isort configuration for import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*", 
    "scipy.*",
    "sympy.*",
    "pandas.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "observer: marks tests related to observer framework",
    "network: marks tests related to network framework", 
    "compression: marks tests related to compression analysis",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "validation_results"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings for research code
